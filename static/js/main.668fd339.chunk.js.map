{"version":3,"sources":["components/search-box/search-box.js","components/card/card.component.js","components/card-list/card-list.component.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","placeholder","handelSearch","react_default","a","createElement","className","type","onChange","Card","props","alt","src","concat","monster","id","name","email","CardList","user","map","card_component_Card","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handelChange","e","setState","searchField","target","value","state","_this2","fetch","then","response","json","users","_this$state","filterMonsters","filter","toLowerCase","includes","search_box_SearchBox","card_list_component_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAGaA,eAAY,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAaC,EAAfF,EAAeE,aAAf,OACrBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAASN,YAAaA,EAAaO,SAAUN,OCFpDO,SAAO,SAACC,GAAD,OAChBP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKM,IAAI,UAAUC,IAAG,wBAAAC,OAA0BH,EAAMI,QAAQC,GAAxC,eACtBZ,EAAAC,EAAAC,cAAA,UAAKK,EAAMI,QAAQE,MACnBb,EAAAC,EAAAC,cAAA,UAAKK,EAAMI,QAAQG,UCHdC,SAAW,SAACR,GAErB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVI,EAAMS,KAAKC,IAAI,SAAAN,GAAO,OAAKX,EAAAC,EAAAC,cAACgB,EAAD,CAAOC,IAAKR,EAAQC,GAAID,QAASA,SC6B1DS,cA9Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaFI,aAAe,SAACC,GACdR,EAAKS,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpCZ,EAAKa,MAAQ,CACXvB,QAAS,GACToB,YAAa,IAJHV,mFAQM,IAAAc,EAAAX,KAClBY,MAAM,8CACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAEnB,QAAS6B,uCAMnC,IAAAC,EACwBjB,KAAKU,MAA7BvB,EADA8B,EACA9B,QAASoB,EADTU,EACSV,YACVW,EAAiB/B,EAAQgC,OAAO,SAAAhC,GAAO,OAAIA,EAAQE,KAAK+B,cAAcC,SAASd,EAAYa,iBACjG,OAAO5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACpBH,EAAAC,EAAAC,cAAA,6BAEAF,EAAAC,EAAAC,cAAC4C,EAAD,CAAWhD,YAAY,iBAAiBC,aAAcyB,KAAKI,eAC3D5B,EAAAC,EAAAC,cAAC6C,EAAD,CAAU/B,KAAM0B,YAzBJM,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.668fd339.chunk.js","sourcesContent":["import React from 'react';\r\nimport './search-box.css';\r\n\r\nexport const SearchBox = ({placeholder, handelSearch}) =>(\r\n    <div className='search'>\r\n        <input type='search' placeholder={placeholder} onChange={handelSearch} />\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport './card.component.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className=\"card\">\r\n        <img alt='monstor' src={`https://robohash.org/${props.monster.id}?set=set2`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <h3>{props.monster.email}</h3>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.css';\r\n\r\nexport const CardList = (props) => {\r\n    // console.log(props);\r\n    return (\r\n        <div className='card-list'>\r\n            {props.user.map(monster => (<Card  key={monster.id} monster={monster}/>))}\r\n        </div>\r\n    )\r\n};","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { SearchBox } from './components/search-box/search-box';\r\n\r\nimport { CardList } from './components/card-list/card-list.component';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      monster: [],\r\n      searchField: ''\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ monster: users }));\r\n  };\r\n\r\n  handelChange = (e) => {\r\n    this.setState({searchField:e.target.value});\r\n  }\r\n  render() {\r\n    const {monster, searchField} = this.state;\r\n    const filterMonsters = monster.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    return <div className='App'>\r\n      <h1>Monstor Rolodex</h1>\r\n      {/* <input type='search' placeholder='search monster' onChange={e=>this.setState({searchField:e.target.value})} /> */}\r\n      <SearchBox placeholder='monster search' handelSearch={this.handelChange} />\r\n      <CardList user={filterMonsters}/>\r\n      {/* {this.state.monster.map(monster => (<h1 key={monster.id}>{monster.name}</h1>))} */}\r\n    </div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}